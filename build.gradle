buildscript {
	ext {
		springBootVersion = '2.0.0.M7'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}

}

plugins {
    id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8

task("generateApiDocumentation", dependsOn: 'classes', type: JavaExec) {
    description "Generates API Blueprint documentation"
    main = 'hello.APIBlueprintGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args project.buildDir
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-webflux')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
}

task("mustGoFirst") {
    doLast {
        println "I go first"
    }
}

task('myTask', dependsOn: 'mustGoFirst') {
    description "this is my custom task"
    doLast {
        println "I go second"
        println "Finished my task"
    }
}

release {
    failOnCommitNeeded = false
//    failOnPublishNeeded = true
//    failOnSnapshotDependencies = true
//    failOnUnversionedFiles = true
//    failOnUpdateNeeded = true
//    revertOnFail = true
//    preCommitText = ''
//    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
//    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
//    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
//    tagTemplate = '${version}'
//    versionPropertyFile = 'gradle.properties'
//    versionProperties = []
//    buildTasks = ['build']
//    versionPatterns = [
//            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
//    ]
//    scmAdapters = [
//            net.researchgate.release.GitAdapter,
//            net.researchgate.release.SvnAdapter,
//            net.researchgate.release.HgAdapter,
//            net.researchgate.release.BzrAdapter
//    ]

    git {
        requireBranch = 'iss1'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }

//    svn {
//        username = 'gihanf'
//        password = null
//        pinExternals = false   // allows to pin the externals when tagging, requires subversion client >= 1.9.0
//    }
}

//myTask.dependsOn mustGoFirst